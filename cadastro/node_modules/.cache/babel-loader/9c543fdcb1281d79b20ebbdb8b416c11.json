{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nexport function useFetch(url) {\n  _s();\n\n  const [data, setData] = useState(null);\n  const [isFetching, setIsFetching] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    axios.get(url).then(response => {\n      setData(response.data);\n    }).catch(err => {\n      setError(err);\n    }).finally(() => {\n      setIsFetching(false);\n    });\n  }, []);\n  return {\n    data,\n    error,\n    isFetching\n  };\n}\n\n_s(useFetch, \"7Gmtls/WDoRfRFyplV+L0V/lJfM=\");","map":{"version":3,"sources":["C:/Users/Anderson Lomba/formulario-cadastro/cadastro/src/hooks/useFetch.ts"],"names":["axios","useEffect","useState","useFetch","url","data","setData","isFetching","setIsFetching","error","setError","get","then","response","catch","err","finally"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAGA,OAAO,SAASC,QAAT,CAA+BC,GAA/B,EAA2C;AAAA;;AACjD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAW,IAAX,CAAhC;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAe,IAAf,CAAlC;AAEID,EAAAA,SAAS,CAAC,MAAK;AACZD,IAAAA,KAAK,CAACW,GAAN,CAAUP,GAAV,EACEQ,IADF,CACOC,QAAQ,IAAE;AACdP,MAAAA,OAAO,CAACO,QAAQ,CAACR,IAAV,CAAP;AACD,KAHF,EAIES,KAJF,CAIQC,GAAG,IAAG;AACTL,MAAAA,QAAQ,CAACK,GAAD,CAAR;AACJ,KAND,EAOEC,OAPF,CAOU,MAAK;AACVR,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH,KATF;AAUA,GAXM,EAWJ,EAXI,CAAT;AAaE,SAAM;AAAEH,IAAAA,IAAF;AAAQI,IAAAA,KAAR;AAAeF,IAAAA;AAAf,GAAN;AAEN;;GApBeJ,Q","sourcesContent":["import axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n\r\nexport function useFetch<T = unknown>(url: string){\r\n const [data, setData] = useState<T | null>(null)\r\n const [isFetching, setIsFetching] = useState(true);\r\n const [error, setError] = useState<Error | null>(null);\r\n    \r\n     useEffect(() =>{\r\n        axios.get(url)\r\n         .then(response=>{\r\n           setData(response.data);\r\n         })\r\n         .catch(err =>{\r\n             setError(err);\r\n        })\r\n         .finally(() =>{\r\n             setIsFetching(false);\r\n         })\r\n       }, [])\r\n\r\n       return{ data, error, isFetching }\r\n       \r\n}"]},"metadata":{},"sourceType":"module"}